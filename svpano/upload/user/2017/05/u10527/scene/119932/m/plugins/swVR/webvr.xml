<krpano>
    <plugin name="WebVR" devices="html5" keep="true" url="webvr.js" onloaded="copy(webvr, plugin[WebVR]);"
            mousespeed="0.00125" multireslock="true" mobilevr_support="true" mobilevr_ipd="55"
            mobilevr_screensize="auto" mobilevr_lens_overlap="1.0" mobilevr_lens_fov="96" mobilevr_lens_dist="0.6"
            mobilevr_lens_dist2="1|0|0|0" mobilevr_lens_ca="0.0" mobilevr_lens_vign="100" mobilevr_webvr_dist="false"
            mobilevr_wakelock="true" mobilevr_sensor_mode="3" mobilevr_autocalibration="false"
            mobilevr_touch_support="false" mobilevr_fake_support="true" vr_cursor="hotspot[vr_cursor]"
            vr_cursor_enabled="true"
            vr_cursor_onover="if(handcursor, tween(hotspot[vr_cursor].scale,0.4,0.1); vr_auto_click(get(vr_timeout)); );"
            vr_cursor_onout="tween(hotspot[vr_cursor].scale,0.3,0.1);" onavailable="webvr_onavailable();"
            onunavailable="" onunknowndevice="set(ask_user_for_screensize,true);"
            onentervr="webvr_onentervr(); webvr_act_as_gyro_in_portrait_mode(true); loadscene(get(xml.scene), null, NOPREVIEW|MERGE|KEEPMOVING, BLEND(1));"
            onexitvr="webvr_onexitvr(); vr_menu_setvisibility(false); set(vr_time,13); tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0); loadscene(get(xml.scene),null,NOPREVIEW|MERGE|KEEPMOVING, BLEND(0.5));"/>
    <layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile" url="rotate_device.png"
           scale="0.7" align="top" edge="center" y="28%" autoalpha="true" alpha="0.0" enabled="false"/>
    <events name="webvr_events" keep="true" devices="html5" onresize.mobile="webvr_act_as_gyro_in_portrait_mode();"/>
    <action name="webvr_act_as_gyro_in_portrait_mode">if(device.mobile AND webvr.isenabled, div(aspect, stagewidth,
        stageheight); if(aspect != lastaspect OR '%1' == 'true', copy(lastaspect, aspect); if(stagewidth GT stageheight,
        set(webvr.mobilevr_sensor_mode, 3); webvr.update(); tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0,
        0.0); , set(webvr.mobilevr_sensor_mode, 1); webvr.update();
        tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0); delayedcall(6.0,
        tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 1.0); ); ); ); , set(lastaspect, 0); );
    </action>
    <events name="webvr_events" devices="html5" keep="true"
            onkeydown=" if(keycode==38, set(vlookat_moveforce,-0.3) ); if(keycode==40, set(vlookat_moveforce,+0.3) ); if(keycode==37, set(hlookat_moveforce,-0.3) ); if(keycode==39, set(hlookat_moveforce,+0.3) ); if(webvr.isenabled, if(keycode==34, set(webvr.mobilevr_lens_fov,calc(webvr.mobilevr_lens_fov LT 130 ? webvr.mobilevr_lens_fov + 1 : webvr.mobilevr_lens_fov + 0) ); set(hotspot[vr_cursor].scale,calc(webvr.mobilevr_lens_fov LT 130 ? hotspot[vr_cursor].scale + 0.003 : hotspot[vr_cursor].scale + 0) ); ); if(keycode==33, set(webvr.mobilevr_lens_fov,calc(webvr.mobilevr_lens_fov GT 40 ? webvr.mobilevr_lens_fov - 1 : webvr.mobilevr_lens_fov - 0) ); set(hotspot[vr_cursor].scale,calc(webvr.mobilevr_lens_fov GT 40 ? hotspot[vr_cursor].scale - 0.003 : hotspot[vr_cursor].scale - 0) ); ); );"
            onkeyup=" if(keycode==27, webvr.exitVR();exitVR();start_thumbs(exit);); if(webvr.isenabled, if(keycode==32, webvr.resetSensor(0) ); if(keycode==13, start_thumbs() ); ); if(keycode==18, skin_nextscene(-1) ); if(keycode==17, skin_nextscene(+1) ); if(keycode==38, set(vlookat_moveforce,0) ); if(keycode==40, set(vlookat_moveforce,0) ); if(keycode==37, set(hlookat_moveforce,0) ); if(keycode==39, set(hlookat_moveforce,0) );"
            onmousedown="if(webvr AND webvr.isenabled, webvr_showbuttons() );"/>
    <vrheadsets>
        <headset name="cb1" caption="纸盒 A" overlap="1.10" fov="96.0" dist="1.00" dist2="1|0|0|0" ca="0.000"
                 vig="100"/>
        <headset name="cb2" caption="纸盒 B" overlap="1.00" fov="96.0" dist="0.60" dist2="1|0|0|0" ca="0.000"
                 vig="100"/>
        <headset name="gvr" caption="GearVR" overlap="1.00" fov="112.0" dist="0.95" dist2="1|0|0|0" ca="0.090"
                 vig="100"/>
        <headset name="hom" caption="HOMiDO" overlap="1.00" fov="101.0" dist="1.10" dist2="1|0|0|0" ca="0.075"
                 vig="100"/>
        <headset name="one" caption="VR ONE" overlap="1.00" fov="109.9" dist="0.00" dist2="1.139|0.093|0.018|0.207"
                 ca="0.090" vig="35"/>
        <headset name="ccr" caption="灵镜 VR" overlap="1.00" fov="70.0" dist="0.65" dist2="1|0|0|0" ca="0.000"
                 vig="100"/>
        <headset name="nod" caption="不畸变" overlap="1.00" fov="96.0" dist="0.00" dist2="1|0|0|0" ca="0.000"
                 vig="100"/>
    </vrheadsets>
    <hotspot name="vr_cursor" keep="true" url="webvr_cursor_80x80_17f.png" visible="false" enabled="false"
             distorted="true" crop="0|0|80|80" scale="0.3" depth="1000"/>
    <action name="vr_auto_click">if(webvr.isenabled, if(%1 != null, set(vr_aclk_timeout, %1), set(vr_aclk_timeout,
        2000)); copy(vr_aclk_t1, timertick); set(vr_aclk_waiting, true); set(hotspot[vr_cursor].crop,'0|0|80|80');
        asyncloop(vr_aclk_waiting, sub(dt, timertick,vr_aclk_t1); if(!hovering, set(vr_aclk_waiting, false);
        set(hotspot[vr_cursor].crop,'0|0|80|80'); , div(f, dt, vr_aclk_timeout); mul(f, 16); roundval(f); Math.min(f,
        16); mul(f, 80); txtadd(hotspot[vr_cursor].crop,get(f),'|0|80|80'); sub(dt, 100); if(dt GT vr_aclk_timeout,
        set(vr_aclk_waiting,false); set(hotspot[vr_cursor].crop,'0|0|80|80'); onclick(); ); ); ); );
    </action>
    <action name="webvr_onavailable">webvr.loadsettings(local); set(layer[skin_btn_vr].visible,true); button_wz();
    </action>
    <action name="webvr_onentervr">webvr_showbuttons(); webvr_hide_all_non_vr_layers(); if(webvr.isfake,
        webvr_show_fakemode_info(true); );
    </action>
    <action name="webvr_onexitvr">stopdelayedcall(vr_button_fadeout); tween(layer[webvr_exitbutton].alpha,0);
        tween(layer[webvr_setupbutton].alpha,0); tween(layer[webvr_setupbutton2].alpha,0);
        webvr_show_fakemode_info(false); webvr_restore_layers();
    </action>
    <action name="webvr_hide_all_non_vr_layers">for(set(i,0), i LT layer.count, inc(i), copy(lr, layer[get(i)]);
        if(lr.vr !== true, copy(lr.vr_backup_visible, lr.visible); set(lr.visible, false); ); );
    </action>
    <action name="webvr_restore_layers">for(set(i,0), i LT layer.count, inc(i), copy(lr, layer[get(i)]);
        if(lr.vr_backup_visible, copy(lr.visible, lr.vr_backup_visible); delete(lr.vr_backup_visible); ); );
    </action>
    <style name="webvr_fakemode_info" url="%SWFPATH%/plugins/textfield.swf" keep="true" align="leftbottom" alpha="0"
           x="40" y="40" background="false" css="font-size:24px;color:#FFFFFF;text-align:left;"/>
    <action name="webvr_show_fakemode_info">if('%1' == 'true', addlayer(webvr_fakemode_info);
        layer[webvr_fakemode_info].loadstyle(webvr_fakemode_info); set(layer[webvr_fakemode_info].html,
        '[b]键盘及手柄映射[br][br]方向：方向键[br]场景：回车[br]拉近：Page Up[br]拉远：Page
        Down[br]上一场景：Alt[br]下一场景：Ctrl[/b]'); , removelayer(webvr_fakemode_info); );
    </action>
    <krpano webvr_setup_scale="calc:(1.0 + 1.0*(device.mobile AND stagescale LT 1.0)) / (1.0 + 1.0*device.mobile)"
            webvr_button_scale.normal="1.0" webvr_button_scale.mobile="1.6"/>
    <style name="webvr_button_style" url="%SWFPATH%/plugins/textfield.swf" backgroundcolor="0x000000"
           backgroundalpha="0.5" roundedge="calc:9*webvr_setup_scale*webvr_button_scale"
           css="calc:'color:#FFFFFF;font-size:' + 20*webvr_setup_scale*webvr_button_scale + 'px;'"
           padding="calc:6*webvr_setup_scale*webvr_button_scale + ' ' + 10*webvr_setup_scale*webvr_button_scale"/>
    <layer name="webvr_exitbutton" keep="true" vr="true" style="webvr_button_style" html="退出VR模式" align="top"
           y="130" autoalpha="true" alpha="0.0" onclick="webvr.exitVR();exitVR();"/>
    <layer name="webvr_setupbutton" keep="true" vr="true" style="webvr_button_style" html="VR 参数设置" align="bottom"
           y="24" autoalpha="true" alpha="0.0" onclick="vr_setup()"/>
    <layer name="webvr_setupbutton2" keep="true" vr="true" style="webvr_button_style" html="VR 使用教程" align="bottom"
           y="110" autoalpha="true" alpha="0.0"
           onclick="js(getHtml('http://i.svrvr.com/?c=index&amp;a=wap_img&amp;id=3732'));"/>
    <events name="ClientVR_events" keep="true"/>
    <action name="mouse_js">if(%1 == on, set(ClientVR,true); copy(m_xx,mouse.stagex); copy(m_yy,mouse.stagey);
        asyncloop(ClientVR, copy(m_x,mouse.stagex); copy(m_y,mouse.stagey); set(m_x,calc(m_x - m_xx)); set(m_y,calc(m_y
        - m_yy)); if(view.vlookat GT 90, set(view.vlookat,90); ); if(view.vlookat LT -90, set(view.vlookat,-90); );
        set(view.hlookat,calc(view.hlookat - m_x / 5)); set(view.vlookat,calc(view.vlookat - m_y / 5));
        copy(m_xx,mouse.stagex); copy(m_yy,mouse.stagey); ); ); if(%1 == up, set(ClientVR,false); );
    </action>
    <action name="enterVR">delayedcall(0.25,vr_menu_setvisibility(true);); if(browser.domain == '127.0.1.1',
        set(events[ClientVR_events].onmousedown,mouse_js(on);); set(events[ClientVR_events].onmouseup,mouse_js(up);); );
        set(Inter,hide); Interface(); delayedcall(2.0,add_vr_thumbs();); if(settings.jumpmob, set(jump_mob_vr,true);
        set(settings.jumpmob,false); ); if(settings.jump, set(jump_vr,true); set(settings.jump,false); );
        if(autorotate.enabled, set(autorotate.enabled,false); set(auto_rotate_vr,true); );
    </action>
    <action name="exitVR">vr_menu_setvisibility(false); set(Inter,show); Interface(); if(jump_vr,
        set(settings.jump,true); delete(jump_vr); ); if(jump_mob_vr, set(settings.jumpmob,true); delete(jump_mob_vr); );
        if(auto_rotate_vr, set(auto_rotate_vr,true); delete(auto_rotate_vr); );
    </action>
    <action name="Interface" type="Javascript" devices="html5"><![CDATA[
	var hss1 = krpano.get("Inter");
	if(hss1 == "hide"){
		$(".top_bar,.zimu,#box").hide();
	}else{
		$(".top_bar,.zimu,#box").show();
	}
	]]></action>
    <action name="webvr_showbuttons">stopdelayedcall(vr_button_fadeout); if(webvr.ismobilevr,
        tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton].alpha, 1.0|1.0, 0.25);
        tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton2].alpha, 1.0|1.0, 0.25);
        tween(layer[webvr_exitbutton].alpha|layer[webvr_fakemode_info].alpha, 1.0|1.0, 0.25);
        delayedcall(vr_button_fadeout, 5.0, tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton].alpha, 0.0|0.0,
        1.0); tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton2].alpha, 0.0|0.0, 1.0);
        tween(layer[webvr_exitbutton].alpha|layer[webvr_fakemode_info].alpha, 0.0|0.0, 1.0); ); ,
        tween(layer[webvr_exitbutton].alpha, 1.0, 0.25); delayedcall(vr_button_fadeout, 5.0,
        tween(layer[webvr_exitbutton].alpha, 0.0, 1.0); ); );
    </action>
    <action name="vr_setup">set(webvr.vr_cursor_enabled, false); tween(layer[webvr_exitbutton].alpha,0);
        tween(layer[webvr_setupbutton].alpha,0); tween(layer[webvr_setupbutton2].alpha,0); addlayer(vr_setup_bg);
        set(layer[vr_setup_bg].type, container); set(layer[vr_setup_bg].bgcolor, 0x000000);
        set(layer[vr_setup_bg].bgalpha, 0.5); set(layer[vr_setup_bg].bgcapture, true);
        set(layer[vr_setup_bg].handcursor, false); set(layer[vr_setup_bg].align, lefttop); set(layer[vr_setup_bg].width,
        100%); set(layer[vr_setup_bg].height, 100%); set(layer[vr_setup_bg].zorder, 99999); copy(i_screensize,
        webvr.mobilevr_screensize); if(i_screensize == 'auto', copy(i_screensize, webvr.devicesize)); if(i_screensize LE
        0, set(i_screensize, 5.0)); roundval(i_screensize, 1); txtadd(i_screensize, ' inch'); copy(i_ipd,
        webvr.mobilevr_ipd); roundval(i_ipd, 1); txtadd(i_ipd, ' mm'); copy(i_fov, webvr.mobilevr_lens_fov);
        roundval(i_fov, 1); copy(i_dist, webvr.mobilevr_lens_dist); roundval(i_dist, 2); copy(i_dist2,
        webvr.mobilevr_lens_dist2); txtsplit(i_dist2, '|', i_dist2_k1, i_dist2_k2, i_dist2_k3, i_dist2_k4);
        mul(i_dist2_k1,1); mul(i_dist2_k2,10); mul(i_dist2_k3,10); mul(i_dist2_k4,10); roundval(i_dist2_k1,2);
        roundval(i_dist2_k2,2); roundval(i_dist2_k3,2); roundval(i_dist2_k4,2); copy(i_vig, webvr.mobilevr_lens_vign);
        roundval(i_vig, 0); copy(i_overlap, webvr.mobilevr_lens_overlap); roundval(i_overlap, 2); copy(i_ca,
        webvr.mobilevr_lens_ca); roundval(i_ca, 3); set(i_headset, 'Custom'); for(set(i,0), i LT
        vrheadsets.headset.count, inc(i), copy(hs, vrheadsets.headset[get(i)]); if(i_overlap == hs.overlap AND i_fov ==
        hs.fov AND i_dist == hs.dist AND i_dist2 == hs.dist2 AND i_ca == hs.ca AND i_vig == hs.vig , copy(i_headset,
        hs.caption)); ); set(known_size, true); set(sizcol, #FFFFFF); copy(i_devicename, webvr.devicename);
        if(i_devicename == 'Unknown', if(webvr.mobilevr_screensize == 'auto', set(sizcol, #AA0000); set(known_size,
        false); , set(i_devicename, 'Custom'); ); ); addlayer(vr_setup_m1); set(layer[vr_setup_m1].type, container);
        set(layer[vr_setup_m1].parent, vr_setup_bg); set(layer[vr_setup_m1].align, lefttop);
        set(layer[vr_setup_m1].width, 100%); set(layer[vr_setup_m1].height, 100%); addlayer(vr_setup_m3);
        set(layer[vr_setup_m3].type, container); set(layer[vr_setup_m3].parent, vr_setup_bg);
        set(layer[vr_setup_m3].align, lefttop); set(layer[vr_setup_m3].width, 100%); set(layer[vr_setup_m3].height,
        100%); set(layer[vr_setup_m3].visible, false); addlayer(vr_setup_m2); set(layer[vr_setup_m2].type, container);
        set(layer[vr_setup_m2].parent, vr_setup_bg); set(layer[vr_setup_m2].align, lefttop);
        set(layer[vr_setup_m2].width, 100%); set(layer[vr_setup_m2].height, 100%); set(layer[vr_setup_m2].visible,
        false); set(vr_setup_text_parent, 'vr_setup_m1'); vr_setup_createtext(vr_setup_title, 'VR 设 置', center,
        center, 0, -225, #FFFFFF, false); vr_setup_createtext(vr_setup_dvn1, '播放设备:', center, right, 0, -145,
        #FFFFFF, true, vr_setup_select('screen') ); vr_setup_createtext(vr_setup_dvn2, get(i_devicename), center, left,
        0, -145, get(sizcol), true, vr_setup_select('screen') ); vr_setup_createtext(vr_setup_siz1, '屏幕尺寸:', center,
        right, 0, -105, #FFFFFF, true, vr_setup_select('screen') ); vr_setup_createtext(vr_setup_siz2,
        get(i_screensize), center, left, 0, -105, get(sizcol), true, vr_setup_select('screen') );
        vr_setup_createtext(vr_setup_ipd1, '瞳孔间距:', center, right, 0, -35, #FFFFFF, true, vr_setup_select('ipd') );
        vr_setup_createtext(vr_setup_ipd2, get(i_ipd), center, left, 0, -35, #FFFFFF, true, vr_setup_select('ipd') );
        vr_setup_createtext(vr_setup_hmd1, 'VR 设备:', center, right, 0, +35, #FFFFFF, true, vr_setup_select('headset')
        ); vr_setup_createtext(vr_setup_hmd2, get(i_headset), center, left, 0, +35, #FFFFFF, true,
        vr_setup_select('headset') ); vr_setup_createtext(vr_setup_hmd3, '自定义', center, center, 0, +75, #FFFFFF,
        true, set(background,true), set(background,false), vr_setup_customize_headset() ); if(webvr.iswebvr == false,
        vr_setup_createtext(vr_setup_cal, '陀螺仪校准', center, center, 0, +145, #FFFFFF, true, set(background,true),
        set(background,false),vr_setup_calibration() ); ); vr_setup_createtext(vr_setup_sav, '保 存', center, center,
        -200, +225, #FFFFFF, true, set(background,true), set(background,false), vr_setup_save() );
        vr_setup_createtext(vr_setup_rst, '重 置', center, center, 0, +225, #FFFFFF, true, set(background,true),
        set(background,false), vr_setup_reset() ); vr_setup_createtext(vr_setup_cls, '取 消', center, center, +200,
        +225, #FFFFFF, true, set(background,true), set(background,false), vr_setup_close() );
        vr_setup_createbutton(vr_setup_btn1, '&lt;', left, left, 5%, -35, #FFFFFF, true, null);
        vr_setup_createbutton(vr_setup_btn2, '&gt;', right, right, 5%, -35, #FFFFFF, true, null);
        set(vr_setup_text_parent, 'vr_setup_m3'); vr_setup_createtext(vr_setup_m31, 'VR 设备预设', center, center, 0,
        -225, #FFFFFF, false); vr_setup_createtext(vr_setup_fov1, 'FOV:', center, right, 0, -80, #FFFFFF, true,
        vr_setup_select('fov') ); vr_setup_createtext(vr_setup_fov2, get(i_fov), center, left, 0, -80, #FFFFFF, true,
        vr_setup_select('fov') ); vr_setup_createtext(vr_setup_dst1, '扭 曲:', center, right, 0, -32, #FFFFFF, true,
        vr_setup_select('dist') ); vr_setup_createtext(vr_setup_dst2, get(i_dist), center, left, 0, -32, #FFFFFF, true,
        vr_setup_select('dist') ); vr_setup_createtext(vr_setup_d2tx, '距 离:', center, right, 0, +16, #FFFFFF, true,
        vr_setup_select('dist2k1') ); vr_setup_createtext(vr_setup_d2k1, get(i_dist2_k1), center, left, 0, +16, #FFFFFF,
        true, vr_setup_select('dist2k1') ); vr_setup_createtext(vr_setup_d2k2, get(i_dist2_k2), center, left, +100, +16,
        #FFFFFF, true, vr_setup_select('dist2k2') ); vr_setup_createtext(vr_setup_d2k3, get(i_dist2_k3), center, left,
        +200, +16, #FFFFFF, true, vr_setup_select('dist2k3') ); vr_setup_createtext(vr_setup_d2k4, get(i_dist2_k4),
        center, left, +300, +16, #FFFFFF, true, vr_setup_select('dist2k4') ); vr_setup_createtext(vr_setup_cac1, 'CA
        偏移:', center, right, 0, +64, #FFFFFF, true, vr_setup_select('ca') ); vr_setup_createtext(vr_setup_cac2,
        get(i_ca), center, left, 0, +64, #FFFFFF, true, vr_setup_select('ca') ); vr_setup_createtext(vr_setup_vig1,
        'Vignette:', center, right, 0, +112, #FFFFFF, true, vr_setup_select('vignette') );
        vr_setup_createtext(vr_setup_vig2, get(i_vig), center, left, 0, +112, #FFFFFF, true, vr_setup_select('vignette')
        ); vr_setup_createtext(vr_setup_olp1, '景 深:', center, right, 0, +160, #FFFFFF, true,
        vr_setup_select('overlap') ); vr_setup_createtext(vr_setup_olp2, get(i_overlap), center, left, 0, +160, #FFFFFF,
        true, vr_setup_select('overlap') ); vr_setup_createtext(vr_setup_m35, '保存并返回', center, center, 0, +225,
        #FFFFFF, true, set(background,true), set(background,false), vr_setup_close_sub_menus() );
        set(vr_setup_text_parent, 'vr_setup_m2'); vr_setup_createtext(vr_setup_cb1, '陀螺仪校准', center, center, 0,
        -225, #FFFFFF, false); vr_setup_createtext(vr_setup_cb2, '请将设备放置在一[br]个平稳的表面和标[br]签校准纠正陀螺漂移',
        center, center, 0, -95, #FFFFFF, false, vr_setup_select('screen') ); vr_setup_createtext(vr_setup_cb3, '校准',
        center, center, 0, +55, #FFFFFF, true, set(background,true), set(background,false), vr_setup_do_calibration() );
        vr_setup_createtext(vr_setup_cb4, '重置', center, center, 0, +125, #FFFFFF, true, set(background,true),
        set(background,false), webvr.resetcalibration() ); vr_setup_createtext(vr_setup_cb5, '返回', center, center, 0,
        +225, #FFFFFF, true, set(background,true), set(background,false), vr_setup_close_sub_menus() );
        vr_setup_createtext(vr_setup_cb6, '校准中...', bottom, center, 0, 40, #FFFFFF, false, null );
        vr_setup_createtext(vr_setup_cb7, '校准成功.', bottom, center, 0, 40, #FFFFFF, false, null );
        vr_setup_createtext(vr_setup_cb8, '校准失败!', bottom, center, 0, 40, #FFFFFF, false, null );
        set(layer[vr_setup_cb6].autoalpha, true); set(layer[vr_setup_cb7].autoalpha, true);
        set(layer[vr_setup_cb8].autoalpha, true); set(layer[vr_setup_cb6].alpha, 0.0); set(layer[vr_setup_cb7].alpha,
        0.0); set(layer[vr_setup_cb8].alpha, 0.0); if(known_size == false, vr_setup_select('screen', true); ,
        vr_setup_select('ipd', true); );
    </action>
    <action name="vr_setup_createtext">addlayer(%1); set(layer[%1].parent, get(vr_setup_text_parent));
        set(layer[%1].url, '%SWFPATH%/plugins/textfield.swf'); set(layer[%1].css,
        calc('text-align:%3;color:%7;font-size:'+40*webvr_setup_scale+'px;font-weight:bold;')); set(layer[%1].padding,
        calc(0 + ' ' + 8*webvr_setup_scale)); set(layer[%1].roundedge, calc(8*webvr_setup_scale));
        set(layer[%1].background, false); set(layer[%1].backgroundcolor, 0xFFFFFF); set(layer[%1].backgroundalpha,
        0.25); set(layer[%1].align, %3); set(layer[%1].edge, %4); set(layer[%1].x, calc(%5 * webvr_setup_scale));
        set(layer[%1].y, calc(%6 * webvr_setup_scale)); set(layer[%1].html, %2); set(layer[%1].enabled, %8);
        set(layer[%1].ondown, %9); set(layer[%1].onup, %10); set(layer[%1].onclick, %11);
    </action>
    <action name="vr_setup_createbutton">vr_setup_createtext(%1,%2,%3,%4,%5,%6,%7,%8,%9); set(layer[%1].css,
        calc('vertical-align:middle;text-align:center;color:%7;font-size:'+60*webvr_setup_scale+'px;font-weight:bold;'));
        set(layer[%1].background, true); set(layer[%1].padding, 0); set(layer[%1].roundedge, calc(40 *
        webvr_setup_scale)); set(layer[%1].width, calc(70 * webvr_setup_scale)); set(layer[%1].height, calc(70 *
        webvr_setup_scale)); set(layer[%1].vcenter, true);
    </action>
    <action name="vr_setup_reset">set(webvr.mobilevr_screensize, 'auto'); copy(i_screensize, webvr.devicesize);
        if(i_screensize LE 0, set(i_screensize, 5.0);); roundval(i_screensize, 1); set(layer[vr_setup_dvn2].html,
        get(webvr.devicename)); txtadd(layer[vr_setup_siz2].html, get(i_screensize), ' inch'); set(webvr.mobilevr_ipd,
        63.5); copy(i_ipd, webvr.mobilevr_ipd); roundval(i_ipd, 1); txtadd(layer[vr_setup_ipd2].html, get(i_ipd), '
        mm'); set(webvr.mobilevr_lens_fov, 100); set(webvr.mobilevr_lens_dist, 0.5); set(webvr.mobilevr_lens_dist2,
        '1|0|0|0'); set(webvr.mobilevr_lens_vign, 100); set(webvr.mobilevr_lens_overlap, 1.0);
        set(webvr.mobilevr_lens_ca, 0.0); if(webvr.isfake AND device.desktop, vr_setup_change_headset(-1); ,
        vr_setup_change_headset(+1); ); vr_setup_select(get(selected_var));
    </action>
    <action name="vr_setup_close">removelayer(vr_setup_bg, true); set(webvr.vr_cursor_enabled, true);</action>
    <action name="vr_setup_save">webvr.saveSettings(); vr_setup_close();</action>
    <action name="vr_setup_customize_headset">set(layer[vr_setup_bg].bgalpha, 0.1);
        set(layer[vr_setup_m1].visible,false); set(layer[vr_setup_m2].visible,false);
        set(layer[vr_setup_m3].visible,true); set(layer[vr_setup_hmd1].parent, vr_setup_m3);
        set(layer[vr_setup_hmd2].parent, vr_setup_m3); set(layer[vr_setup_btn1].parent, vr_setup_m3);
        set(layer[vr_setup_btn2].parent, vr_setup_m3); set(layer[vr_setup_hmd1].y, calc(-145 * webvr_setup_scale));
        set(layer[vr_setup_hmd2].y, calc(-145 * webvr_setup_scale)); copy(old_selection, selected_var);
        vr_setup_select('headset');
    </action>
    <action name="vr_setup_calibration">set(layer[vr_setup_m1].visible,false); set(layer[vr_setup_m2].visible,true);
    </action>
    <action name="vr_setup_close_sub_menus">set(layer[vr_setup_bg].bgalpha, 0.5); set(layer[vr_setup_m1].visible,true);
        set(layer[vr_setup_m2].visible,false); set(layer[vr_setup_m3].visible,false); set(layer[vr_setup_hmd1].parent,
        vr_setup_m1); set(layer[vr_setup_hmd2].parent, vr_setup_m1); set(layer[vr_setup_btn1].parent, vr_setup_m1);
        set(layer[vr_setup_btn2].parent, vr_setup_m1); set(layer[vr_setup_hmd1].y, calc(+35 * webvr_setup_scale));
        set(layer[vr_setup_hmd2].y, calc(+35 * webvr_setup_scale)); if(old_selection,
        vr_setup_select(get(old_selection)); delete(old_selection); );
    </action>
    <action name="vr_setup_do_calibration">if(!webvr.isfake, tween(layer[vr_setup_cb6].alpha, 1.0, 0.1);
        tween(layer[vr_setup_cb7].alpha, 0.0, 0.1); tween(layer[vr_setup_cb8].alpha, 0.0, 0.1); webvr.calibrate(
        tween(layer[vr_setup_cb6].alpha, 0.0, 0.1); tween(layer[vr_setup_cb7].alpha, 1.0, 0.1); delayedcall(2.0,
        tween(layer[vr_setup_cb7].alpha, 0.0, 0.25) ); , tween(layer[vr_setup_cb6].alpha, 0.0, 0.1);
        tween(layer[vr_setup_cb8].alpha, 1.0, 0.1); delayedcall(2.0, tween(layer[vr_setup_cb8].alpha, 0.0, 0.25) ); );
        );
    </action>
    <action name="vr_setup_update_dist2">txtadd(webvr.mobilevr_lens_dist2, get(i_dist2_k1), '|', calc(i_dist2_k2/10.0),
        '|', calc(i_dist2_k3/10.0), '|', calc(i_dist2_k4/10.0)); vr_setup_change_headset(0);
    </action>
    <action name="vr_setup_select">set(layer[vr_setup_siz2].background, false); set(layer[vr_setup_ipd2].background,
        false); set(layer[vr_setup_hmd2].background, false); set(layer[vr_setup_fov2].background, false);
        set(layer[vr_setup_dst2].background, false); set(layer[vr_setup_d2k1].background, false);
        set(layer[vr_setup_d2k2].background, false); set(layer[vr_setup_d2k3].background, false);
        set(layer[vr_setup_d2k4].background, false); set(layer[vr_setup_vig2].background, false);
        set(layer[vr_setup_cac2].background, false); set(layer[vr_setup_olp2].background, false); set(selected_setting,
        null); delete(selected_var_value); set(layer[vr_setup_btn1].ondown, vr_setup_change_ondown(-1) );
        set(layer[vr_setup_btn2].ondown, vr_setup_change_ondown(+1) ); set(selected_var_callback, null);
        set(selected_var, %1); if(selected_var == 'screen', set(selected_setting, vr_setup_siz2); set(selected_var_name,
        'webvr.mobilevr_screensize'); set(selected_var_postfix, ' inch'); copy(selected_var_value,
        get(selected_var_name)); if(selected_var_value == 'auto', copy(selected_var_value, webvr.devicesize));
        if(selected_var_value LE 0, set(selected_var_value, 5.0)); set(selected_var_step, 0.1); set(selected_var_min,
        4); set(selected_var_max, 10); set(selected_var_round, 1); set(selected_var_callback, vr_setup_change_screen()
        ); ); if(selected_var == 'ipd', set(selected_setting, vr_setup_ipd2); set(selected_var_name,
        'webvr.mobilevr_ipd'); set(selected_var_postfix, ' mm'); copy(selected_var_value, get(selected_var_name));
        set(selected_var_step, 0.1); set(selected_var_min, 40); set(selected_var_max, 80); set(selected_var_round, 1);
        ); if(selected_var == 'headset', set(selected_setting, vr_setup_hmd2); set(layer[vr_setup_btn1].ondown,
        vr_setup_change_headset(-1) ); set(layer[vr_setup_btn2].ondown, vr_setup_change_headset(+1) ); );
        if(selected_var == 'fov', set(selected_setting, vr_setup_fov2); set(selected_var_name,
        'webvr.mobilevr_lens_fov'); set(selected_var_postfix, ''); copy(selected_var_value, get(selected_var_name));
        set(selected_var_step, 0.1); set(selected_var_min, 40); set(selected_var_max, 179); set(selected_var_round, 1);
        set(selected_var_callback, vr_setup_change_headset(0) ); ); if(selected_var == 'dist', set(selected_setting,
        vr_setup_dst2); set(selected_var_name, 'webvr.mobilevr_lens_dist'); set(selected_var_postfix, '');
        copy(selected_var_value, get(selected_var_name)); set(selected_var_step, 0.01); set(selected_var_min, 0);
        set(selected_var_max, 5); set(selected_var_round, 2); set(selected_var_callback, vr_setup_change_headset(0) );
        ); if(selected_var == 'dist2k1', set(selected_setting, vr_setup_d2k1); set(selected_var_name, 'i_dist2_k1');
        set(selected_var_postfix, ''); copy(selected_var_value, get(selected_var_name)); set(selected_var_step, 0.01);
        set(selected_var_min, -9); set(selected_var_max, +9); set(selected_var_round, 2); set(selected_var_callback,
        vr_setup_update_dist2() ); ); if(selected_var == 'dist2k2', set(selected_setting, vr_setup_d2k2);
        set(selected_var_name, 'i_dist2_k2'); set(selected_var_postfix, ''); copy(selected_var_value,
        get(selected_var_name)); set(selected_var_step, 0.01); set(selected_var_min, -9); set(selected_var_max, +9);
        set(selected_var_round, 2); set(selected_var_callback, vr_setup_update_dist2() ); ); if(selected_var ==
        'dist2k3', set(selected_setting, vr_setup_d2k3); set(selected_var_name, 'i_dist2_k3'); set(selected_var_postfix,
        ''); copy(selected_var_value, get(selected_var_name)); set(selected_var_step, 0.01); set(selected_var_min, -9);
        set(selected_var_max, +9); set(selected_var_round, 2); set(selected_var_callback, vr_setup_update_dist2() ); );
        if(selected_var == 'dist2k4', set(selected_setting, vr_setup_d2k4); set(selected_var_name, 'i_dist2_k4');
        set(selected_var_postfix, ''); copy(selected_var_value, get(selected_var_name)); set(selected_var_step, 0.01);
        set(selected_var_min, -9); set(selected_var_max, +9); set(selected_var_round, 2); set(selected_var_callback,
        vr_setup_update_dist2() ); ); if(selected_var == 'vignette', set(selected_setting, vr_setup_vig2);
        set(selected_var_name,'webvr.mobilevr_lens_vign'); set(selected_var_postfix, ''); copy(selected_var_value,
        get(selected_var_name)); set(selected_var_step, 1); set(selected_var_min, 10); set(selected_var_max, 200);
        set(selected_var_round, 0); set(selected_var_callback, vr_setup_change_headset(0) ); ); if(selected_var == 'ca',
        set(selected_setting, vr_setup_cac2); set(selected_var_name, 'webvr.mobilevr_lens_ca');
        set(selected_var_postfix, ''); copy(selected_var_value, get(selected_var_name)); set(selected_var_step, 0.01);
        set(selected_var_min, -1.0); set(selected_var_max, +1.0); set(selected_var_round, 2); set(selected_var_callback,
        vr_setup_change_headset(0) ); ); if(selected_var == 'overlap', set(selected_setting, vr_setup_olp2);
        set(selected_var_name, 'webvr.mobilevr_lens_overlap'); set(selected_var_postfix, ''); copy(selected_var_value,
        get(selected_var_name)); set(selected_var_step, 0.01); set(selected_var_min, 0.5); set(selected_var_max, 2.0);
        set(selected_var_round, 2); set(selected_var_callback, vr_setup_change_headset(0) ); ); if(selected_setting !=
        null, set(layer[get(selected_setting)].background, true); if(%2 == true, set(layer[vr_setup_btn1].y,
        get(layer[get(selected_setting)].y)); set(layer[vr_setup_btn2].y, get(layer[get(selected_setting)].y)); ,
        tween(layer[vr_setup_btn1].y, get(layer[get(selected_setting)].y)); tween(layer[vr_setup_btn2].y,
        get(layer[get(selected_setting)].y)); ); );
    </action>
    <action name="vr_setup_change_screen">set(layer[vr_setup_dvn2].html, 'Custom'); set(layer[vr_setup_dvn2].css,
        calc('color:#FFFFFF;font-size:'+40*webvr_setup_scale+'px;font-weight:bold;')); set(layer[vr_setup_siz2].css,
        calc('color:#FFFFFF;font-size:'+40*webvr_setup_scale+'px;font-weight:bold;'));
    </action>
    <action name="vr_setup_change_ondown">copy(t0,timertick); set(t1,0); asyncloop(pressed, copy(t2,timertick);
        sub(dt,t2,t1); if(dt GT 100, copy(t1,t2); sub(dt,t1,t0); div(dt,1000); Math.max(dt,1); mul(dt,%1);
        vr_setup_adjust(get(dt)); ); );
    </action>
    <action name="vr_setup_adjust">if(selected_setting != null, mul(change, selected_var_step, %1);
        add(selected_var_value, change); Math.max(selected_var_value, selected_var_min); Math.min(selected_var_value,
        selected_var_max); roundval(selected_var_value, get(selected_var_round)); tween(get(selected_var_name),
        get(selected_var_value), 0.1); txtadd(layer[get(selected_setting)].html, get(selected_var_value),
        get(selected_var_postfix)); if(selected_var_callback != null, selected_var_callback()); );
    </action>
    <action name="vr_setup_change_headset">set(i_headset, 'Custom'); if(%1 != 0, copy(i_fov, webvr.mobilevr_lens_fov);
        roundval(i_fov, 1); copy(i_dist, webvr.mobilevr_lens_dist); roundval(i_dist, 2); copy(i_dist2,
        webvr.mobilevr_lens_dist2); copy(i_vig, webvr.mobilevr_lens_vign); roundval(i_vig, 0); copy(i_ca,
        webvr.mobilevr_lens_ca); roundval(i_ca, 3); copy(i_overlap, webvr.mobilevr_lens_overlap); roundval(i_overlap,
        2); set(i_hsindex, -1); copy(i_hscount, vrheadsets.headset.count); for(set(i,0), i LT i_hscount, inc(i),
        copy(hs, vrheadsets.headset[get(i)]); if(i_overlap == hs.overlap AND i_fov == hs.fov AND i_dist == hs.dist AND
        i_dist2 == hs.dist2 AND i_ca == hs.ca AND i_vig == hs.vig , copy(i_hsindex, i); copy(i_headset, hs.caption); );
        ); if(%1 GT 0, add(i_hsindex, 1); if(i_hsindex GE i_hscount, set(i_hsindex,0)); , sub(i_hsindex, 1);
        if(i_hsindex LT 0, sub(i_hsindex,i_hscount,1)); ); copy(hs, vrheadsets.headset[get(i_hsindex)]); copy(i_headset,
        hs.caption); copy(i_overlap, hs.overlap); copy(i_fov, hs.fov); copy(i_dist, hs.dist); copy(i_dist2, hs.dist2);
        copy(i_ca, hs.ca); copy(i_vig, hs.vig); ); copy(layer[vr_setup_hmd2].html, i_headset); if(%1 != 0,
        copy(webvr.mobilevr_lens_overlap, i_overlap); copy(webvr.mobilevr_lens_fov, i_fov);
        copy(webvr.mobilevr_lens_dist, i_dist); copy(webvr.mobilevr_lens_dist2, i_dist2); copy(webvr.mobilevr_lens_ca,
        i_ca); copy(webvr.mobilevr_lens_vign, i_vig); copy(layer[vr_setup_olp2].html, i_overlap);
        copy(layer[vr_setup_fov2].html, i_fov); copy(layer[vr_setup_dst2].html, i_dist); txtsplit(i_dist2, '|',
        i_dist2_k1, i_dist2_k2, i_dist2_k3, i_dist2_k4); mul(i_dist2_k1,1); mul(i_dist2_k2,10); mul(i_dist2_k3,10);
        mul(i_dist2_k4,10); roundval(i_dist2_k1,2); roundval(i_dist2_k2,2); roundval(i_dist2_k3,2);
        roundval(i_dist2_k4,2); copy(layer[vr_setup_d2k1].html, i_dist2_k1); copy(layer[vr_setup_d2k2].html,
        i_dist2_k2); copy(layer[vr_setup_d2k3].html, i_dist2_k3); copy(layer[vr_setup_d2k4].html, i_dist2_k4);
        copy(layer[vr_setup_cac2].html, i_ca); copy(layer[vr_setup_vig2].html, i_vig); );
    </action>
    <events name="vr_menu_events" keep="true" onviewchange="vr_menu_following();"/>
    <style name="vr_menu_style" depth="800" scale="0.2" url="texts.png" distorted="true" ath="0" atv="45" alpha="0.35"
           visible="false"/>
    <hotspot name="vr_menu_bg" style="vr_menu_style" keep="true" zorder="5" url="black.png" width="500" height="120"
             onover="vr_menu_over();" onout="vr_menu_out();" handcursor="false"/>
    <hotspot name="vr_menu_home" style="vr_menu_style" keep="true" zorder="6" crop="190|0|100|100" ox="0"
             onover="vr_menu_over(); delayedcall(0,tween(alpha,0.8,0.1));" onout="vr_menu_out();" vr_timeout="700"
             onclick="start_thumbs();"/>
    <hotspot name="vr_menu_l" style="vr_menu_style" keep="true" zorder="6" crop="0|0|100|100" ox="-30"
             onover="vr_menu_over(); delayedcall(0,tween(alpha,0.8,0.1));" onout="vr_menu_out();" vr_timeout="700"
             onclick="skin_nextscene(-1);"/>
    <hotspot name="vr_menu_r" style="vr_menu_style" keep="true" zorder="6" crop="80|0|100|100" ox="+30"
             onover="vr_menu_over(); delayedcall(0,tween(alpha,0.8,0.1));" onout="vr_menu_out();" vr_timeout="700"
             onclick="skin_nextscene(+1);"/>
    <action protect="true" name="vr_menu_over">callwith(hotspot[vr_menu_bg], tween(alpha|depth,1.0|600); );
        callwith(hotspot[vr_menu_home], tween(alpha|depth,0.6|500); ); callwith(hotspot[vr_menu_l],
        tween(alpha|depth,0.6|550); ); callwith(hotspot[vr_menu_r], tween(alpha|depth,0.6|550); );
    </action>
    <action protect="true" name="vr_menu_out">callwith(hotspot[vr_menu_bg], tween(alpha|depth,0.35|800); );
        callwith(hotspot[vr_menu_home], tween(alpha|depth,0.35|800); ); callwith(hotspot[vr_menu_l],
        tween(alpha|depth,0.35|800); ); callwith(hotspot[vr_menu_r], tween(alpha|depth,0.35|800); );
    </action>
    <action protect="true" name="vr_menu_setvisibility">set(hotspot[vr_menu_bg].visible, %1);
        set(hotspot[vr_menu_home].visible, %1); if(scene.count GT 1, set(hotspot[vr_menu_bg].width, 500);
        set(hotspot[vr_menu_l].visible, %1); set(hotspot[vr_menu_r].visible, %1); , set(hotspot[vr_menu_bg].width, 320);
        set(hotspot[vr_menu_l].visible, false); set(hotspot[vr_menu_r].visible, false); );
    </action>

    <action protect="true" name="vr_menu_following" type="Javascript" devices="html5"><![CDATA[

		var hs1 = krpano.get("hotspot[vr_menu_bg]");
		var hs2 = krpano.get("hotspot[vr_menu_home]");
		var hs3 = krpano.get("hotspot[vr_menu_l]");
		var hs4 = krpano.get("hotspot[vr_menu_r]");

		if(!hs1.hovering && !hs2.hovering && !hs3.hovering && !hs4.hovering)
		{
			var f = 0.02;	// follow speed factor

			var h = krpano.view.hlookat;
			var v = krpano.view.vlookat;
			var hsh = hs1.ath;
			var hsv = hs1.atv;

			// map to -180 to +180
			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;

			// get the shortest horizontal distance
			dh = h - hsh;
			dh += (dh>180) ? -360 : (dh<-180) ? 360 : 0;

			// follow slowing horizontally
			hsh += dh*f;

			// fade out when farther away
			var a = Math.abs(v - hs1.atv) / 90.0;
			a = 0.5 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);

			// move up the more looking down
			v = v + 55.0 - v*1.5;
			hsv = hsv*(1-f) + v*f;

			// set everything
			hs2.alpha = hs1.alpha = a;
			if(!hs3.hovering) hs3.alpha = a;
			if(!hs4.hovering) hs4.alpha = a;
			hs4.ath = hs3.ath = hs2.ath = hs1.ath = hsh;
			hs4.atv = hs3.atv = hs2.atv = hs1.atv = hsv;
		}

	]]></action>

    <action name="vr_menu_following" devices="flash">copy(h,view.hlookat); copy(v,view.vlookat); mul(dv,v,1.5);
        add(v,55); sub(v,dv); getlooktodistance(a,h,v); div(a,90); sub(a,0.5,a); Math.min(a,0.5);
        copy(hs,hotspot[vr_menu_bg]); copy(hs.ath,h); copy(hs.atv,v); copy(hs.alpha,a); copy(hs,hotspot[vr_menu_home]);
        copy(hs.ath,h); copy(hs.atv,v); copy(hs.alpha,a); copy(hs,hotspot[vr_menu_l]); copy(hs.ath,h); copy(hs.atv,v);
        copy(hs.alpha,a); copy(hs,hotspot[vr_menu_r]); copy(hs.ath,h); copy(hs.atv,v); copy(hs.alpha,a);
    </action>
    <style name="vr_panel_style" distorted="true" enabled="false" zorder="1" url="black.png" width="100" height="70"
           alpha="0" depth="700" ty="10000" keep="true"/>
    <style name="vr_thumb_style" distorted="true" enabled="false" zorder="3" capture="false" alpha="0" depth="700"
           ty="10000" width="90" height="60" onover="tween(depth,500);" onout="tween(depth,700);" keep="true"/>
    <action name="add_vr_thumbs">set(vr_hot_ath,0); set(vr_hot_atv,0); set(vr_ts,true); for(set(i,0), i LT scene.count,
        inc(i), set(vr_thumbs,get(scene[get(i)].name)); if(vr_ts, set(vr_thumbs_bg,vr_tishi_bg);
        set(vr_thumbs,vr_tishi); set(vr_hot_url,'%SWFPATH%/plugins/swVR/texts.png'); set(vr_ts,false); sub(i,1); ,
        txtadd(vr_thumbs_bg,get(vr_thumbs),'bg'); set(vr_hot_url,get(scene[get(vr_thumbs)].thumburl)); ); if((vr_hot_ath
        == 360) OR (vr_hot_ath == 720) OR (vr_hot_ath == 1080), add(vr_hot_atv,15); ); addhotspot(get(vr_thumbs_bg));
        hotspot[get(vr_thumbs_bg)].loadstyle(vr_panel_style); set(hotspot[get(vr_thumbs_bg)].ath,get(vr_hot_ath));
        set(hotspot[get(vr_thumbs_bg)].atv,get(vr_hot_atv)); addhotspot(get(vr_thumbs));
        set(hotspot[get(vr_thumbs)].ath,get(vr_hot_ath)); set(hotspot[get(vr_thumbs)].atv,get(vr_hot_atv));
        set(hotspot[get(vr_thumbs)].url,get(vr_hot_url)); if((vr_hot_ath == vr_ts) AND (vr_hot_atv == 0),
        set(hotspot[vr_tishi].crop,287|0|252|176); ,
        txtadd(hotspot[get(vr_thumbs)].onclick,"start_thumbs(exit);loadscene(",get(vr_thumbs),", null,
        NOPREVIEW|MERGE|KEEPMOVING, BLEND(1));"); ); hotspot[get(vr_thumbs)].loadstyle(vr_thumb_style);
        add(vr_hot_ath,20); );
    </action>
    <action name="start_thumbs">set(start_ty, 10000); add(vr_juli,get(view.hlookat),20); if(%1 == "exit",
        callwith(hotspot[vr_tishi_bg], tween(alpha|ty, 0|10000,2.5, easeInQuint|easeInQuint); );
        callwith(hotspot[vr_tishi], tween(alpha|ty, 0|10000,2.5, easeInQuint|easeInQuint, set(enabled,false)); ); ,
        set(hotspot[vr_tishi_bg].ath,get(view.hlookat)); set(hotspot[vr_tishi].ath,get(view.hlookat));
        callwith(hotspot[vr_tishi_bg], copy(ty,start_ty); tween(alpha|ty, 0.5|0 , 3, easeOutQuad|easeOutQuint); );
        callwith(hotspot[vr_tishi], copy(ty,start_ty); tween(alpha|ty, 1.0|0 , 3, easeOutQuad|easeOutQuint,
        set(enabled,true)); ); vr_yc_thumbs_time(0); ); for(set(i,0), i LT scene.count, inc(i),
        set(vr_thumbs,get(scene[get(i)].name)); txtadd(vr_thumbs_bg,get(vr_thumbs),'bg'); if(%1 == "exit",
        callwith(hotspot[get(vr_thumbs_bg)], tween(alpha|ty, 0|10000,2.5, easeInQuint|easeInQuint); );
        callwith(hotspot[get(vr_thumbs)], tween(alpha|ty, 0|10000,2.5, easeInQuint|easeInQuint, set(enabled,false)); );
        , set(hotspot[get(vr_thumbs_bg)].ath,get(vr_juli)); set(hotspot[get(vr_thumbs)].ath,get(vr_juli));
        callwith(hotspot[get(vr_thumbs_bg)], copy(ty,start_ty); tween(alpha|ty, 0.5|0 , 3,easeOutQuad|easeOutQuint); );
        callwith(hotspot[get(vr_thumbs)], copy(ty,start_ty); tween(alpha|ty, 1.0|0 , 3,easeOutQuad|easeOutQuint,
        set(enabled,true)); ); add(vr_juli,20); ); );
    </action>
    <action protect="true" name="vr_yc_thumbs_time">set(vr_time,%1); add(vr_time,1); set(time_kz,true); if(vr_time ==
        15, delete(time_kz,vr_time); start_thumbs(exit); ); if(time_kz, delayedcall(1,vr_yc_thumbs_time(get(vr_time)));
        );
    </action>
</krpano>